// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bdwatchEvent struct {
	Fsid  [16]uint8
	Label [256]int8
	DevId uint32
	Ret   int32
}

// loadBdwatch returns the embedded CollectionSpec for bdwatch.
func loadBdwatch() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BdwatchBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bdwatch: %w", err)
	}

	return spec, err
}

// loadBdwatchObjects loads bdwatch and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bdwatchObjects
//	*bdwatchPrograms
//	*bdwatchMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBdwatchObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBdwatch()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bdwatchSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bdwatchSpecs struct {
	bdwatchProgramSpecs
	bdwatchMapSpecs
}

// bdwatchSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bdwatchProgramSpecs struct {
	BtrfsRecoverLogTrees     *ebpf.ProgramSpec `ebpf:"btrfs_recover_log_trees"`
	BtrfsRecoverLogTreesExit *ebpf.ProgramSpec `ebpf:"btrfs_recover_log_trees_exit"`
}

// bdwatchMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bdwatchMapSpecs struct {
	BtrfsRecoverLogTreesErrors *ebpf.MapSpec `ebpf:"btrfs_recover_log_trees_errors"`
	PendingCalls               *ebpf.MapSpec `ebpf:"pending_calls"`
	RegisteredDevices          *ebpf.MapSpec `ebpf:"registered_devices"`
}

// bdwatchObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBdwatchObjects or ebpf.CollectionSpec.LoadAndAssign.
type bdwatchObjects struct {
	bdwatchPrograms
	bdwatchMaps
}

func (o *bdwatchObjects) Close() error {
	return _BdwatchClose(
		&o.bdwatchPrograms,
		&o.bdwatchMaps,
	)
}

// bdwatchMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBdwatchObjects or ebpf.CollectionSpec.LoadAndAssign.
type bdwatchMaps struct {
	BtrfsRecoverLogTreesErrors *ebpf.Map `ebpf:"btrfs_recover_log_trees_errors"`
	PendingCalls               *ebpf.Map `ebpf:"pending_calls"`
	RegisteredDevices          *ebpf.Map `ebpf:"registered_devices"`
}

func (m *bdwatchMaps) Close() error {
	return _BdwatchClose(
		m.BtrfsRecoverLogTreesErrors,
		m.PendingCalls,
		m.RegisteredDevices,
	)
}

// bdwatchPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBdwatchObjects or ebpf.CollectionSpec.LoadAndAssign.
type bdwatchPrograms struct {
	BtrfsRecoverLogTrees     *ebpf.Program `ebpf:"btrfs_recover_log_trees"`
	BtrfsRecoverLogTreesExit *ebpf.Program `ebpf:"btrfs_recover_log_trees_exit"`
}

func (p *bdwatchPrograms) Close() error {
	return _BdwatchClose(
		p.BtrfsRecoverLogTrees,
		p.BtrfsRecoverLogTreesExit,
	)
}

func _BdwatchClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bdwatch_x86_bpfel.o
var _BdwatchBytes []byte
