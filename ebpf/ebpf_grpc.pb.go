// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: ebpf/ebpf.proto

package ebpf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ebpf_MonitorBtrfs_FullMethodName = "/replit.ebpf.Ebpf/MonitorBtrfs"
)

// EbpfClient is the client API for Ebpf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EbpfClient interface {
	// MonitorBtrfs watches the given device for failed mounts due to corruption in the btrfs log tree.
	MonitorBtrfs(ctx context.Context, in *MonitorBtrfsRequest, opts ...grpc.CallOption) (Ebpf_MonitorBtrfsClient, error)
}

type ebpfClient struct {
	cc grpc.ClientConnInterface
}

func NewEbpfClient(cc grpc.ClientConnInterface) EbpfClient {
	return &ebpfClient{cc}
}

func (c *ebpfClient) MonitorBtrfs(ctx context.Context, in *MonitorBtrfsRequest, opts ...grpc.CallOption) (Ebpf_MonitorBtrfsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ebpf_ServiceDesc.Streams[0], Ebpf_MonitorBtrfs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ebpfMonitorBtrfsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ebpf_MonitorBtrfsClient interface {
	Recv() (*MonitorBtrfsResponse, error)
	grpc.ClientStream
}

type ebpfMonitorBtrfsClient struct {
	grpc.ClientStream
}

func (x *ebpfMonitorBtrfsClient) Recv() (*MonitorBtrfsResponse, error) {
	m := new(MonitorBtrfsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EbpfServer is the server API for Ebpf service.
// All implementations must embed UnimplementedEbpfServer
// for forward compatibility
type EbpfServer interface {
	// MonitorBtrfs watches the given device for failed mounts due to corruption in the btrfs log tree.
	MonitorBtrfs(*MonitorBtrfsRequest, Ebpf_MonitorBtrfsServer) error
	mustEmbedUnimplementedEbpfServer()
}

// UnimplementedEbpfServer must be embedded to have forward compatible implementations.
type UnimplementedEbpfServer struct {
}

func (UnimplementedEbpfServer) MonitorBtrfs(*MonitorBtrfsRequest, Ebpf_MonitorBtrfsServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorBtrfs not implemented")
}
func (UnimplementedEbpfServer) mustEmbedUnimplementedEbpfServer() {}

// UnsafeEbpfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EbpfServer will
// result in compilation errors.
type UnsafeEbpfServer interface {
	mustEmbedUnimplementedEbpfServer()
}

func RegisterEbpfServer(s grpc.ServiceRegistrar, srv EbpfServer) {
	s.RegisterService(&Ebpf_ServiceDesc, srv)
}

func _Ebpf_MonitorBtrfs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorBtrfsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EbpfServer).MonitorBtrfs(m, &ebpfMonitorBtrfsServer{stream})
}

type Ebpf_MonitorBtrfsServer interface {
	Send(*MonitorBtrfsResponse) error
	grpc.ServerStream
}

type ebpfMonitorBtrfsServer struct {
	grpc.ServerStream
}

func (x *ebpfMonitorBtrfsServer) Send(m *MonitorBtrfsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Ebpf_ServiceDesc is the grpc.ServiceDesc for Ebpf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ebpf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replit.ebpf.Ebpf",
	HandlerType: (*EbpfServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorBtrfs",
			Handler:       _Ebpf_MonitorBtrfs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ebpf/ebpf.proto",
}
